[gd_scene load_steps=18 format=3 uid="uid://db55kjv7kn4oc"]

[ext_resource type="Script" uid="uid://dinpse4k1qunk" path="res://resources/effects/blood_splash/blood_splash.gd" id="1_q3yji"]

[sub_resource type="Shader" id="Shader_nj7ij"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, unshaded;

uniform vec4 main_color : source_color = vec4(0.7, 0.02, 0.01, 1.0);
uniform sampler2D noise_texture;
uniform float distortion_strength : hint_range(0.0, 0.5, 0.01) = 0.1;
uniform float noise_power : hint_range(1.0, 10.0, 0.1) = 5.0;
uniform float base_alpha : hint_range(0.0, 1.0, 0.01) = 0.9;
uniform float angle_influence : hint_range(0.0, 1.0, 0.01) = 0.5;

void vertex() {
	mat4 billboard_matrix = VIEW_MATRIX * mat4(
	    INV_VIEW_MATRIX[0],
	    INV_VIEW_MATRIX[1],
	    INV_VIEW_MATRIX[2],
	    MODEL_MATRIX[3]
	);

	billboard_matrix *= mat4(
	    vec4(length(MODEL_MATRIX[0].xyz), 0.0, 0.0, 0.0),
	    vec4(0.0, length(MODEL_MATRIX[1].xyz), 0.0, 0.0),
	    vec4(0.0, 0.0, length(MODEL_MATRIX[2].xyz), 0.0),
	    vec4(0.0, 0.0, 0.0, 1.0)
	);

	MODELVIEW_MATRIX = billboard_matrix;
	COLOR.rgb = vec3(float(INSTANCE_ID), 0.0, 0.0);
}

void fragment() {
	vec2 center = vec2(0.5);
	vec2 dir = UV - center;
	float radius = length(dir) * 2.0;
	float angle = atan(dir.y, dir.x) / (PI * 2.0);

	float gradient = 1.0 - max(radius, angle * angle_influence);
	float distortion_factor = COLOR.r * distortion_strength;
	vec2 distorted_uv = UV + vec2(distortion_factor);
	float texture_value = pow(texture(noise_texture, distorted_uv).r, noise_power);

	vec3 final_color = main_color.rgb * (vec3(gradient) * vec3(texture_value));
	float alpha_threshold = 1.0 - (gradient * texture_value);

	ALBEDO = final_color;
	ALPHA = base_alpha;
	ALPHA_SCISSOR_THRESHOLD = alpha_threshold;
}"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_1oh5o"]
noise_type = 3
fractal_type = 0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_nj7ij"]
noise = SubResource("FastNoiseLite_1oh5o")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_q3yji"]
render_priority = 0
shader = SubResource("Shader_nj7ij")
shader_parameter/main_color = Color(0.7, 0.02, 0.01, 1)
shader_parameter/noise_texture = SubResource("NoiseTexture2D_nj7ij")
shader_parameter/distortion_strength = 0.1
shader_parameter/noise_power = 5.0
shader_parameter/base_alpha = 0.9
shader_parameter/angle_influence = 0.5

[sub_resource type="Curve" id="Curve_bki1m"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(1, 1), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_nrfwl"]
curve = SubResource("Curve_bki1m")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_eaa30"]
spread = 180.0
initial_velocity_min = 4.0
initial_velocity_max = 6.0
linear_accel_min = 4.0
linear_accel_max = 4.0
scale_max = 3.0
scale_curve = SubResource("CurveTexture_nrfwl")
collision_mode = 2
sub_emitter_mode = 3
sub_emitter_amount_at_collision = 1

[sub_resource type="QuadMesh" id="QuadMesh_ftujp"]

[sub_resource type="Shader" id="Shader_1oh5o"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform vec4 main_color : source_color = vec4(0.7, 0.02, 0.01, 1.0);
uniform sampler2D noise_texture;
uniform float splatter_scale = 1.0;
uniform float distortion_amount : hint_range(0.0, 1.0, 0.01) = 0.1;
uniform float edge_variation : hint_range(0.0, 1.0, 0.01) = 0.2;
uniform float noise_contrast : hint_range(1.0, 10.0, 0.1) = 1.0;

void vertex() {
	COLOR = vec4(float(INSTANCE_ID), INSTANCE_CUSTOM.y, 0.0, 0.0);
}

void fragment() {
	vec2 center = vec2(0.5);
	vec2 uv_dir = (UV - center) / splatter_scale;
	float radius = length(uv_dir) * 2.0;

	float gradient = 1.0 - radius;
	float distortion_strength = COLOR.r * distortion_amount;
	vec2 distorted_uv = UV + vec2(distortion_strength) / splatter_scale;

	float noise_value = pow(texture(noise_texture, distorted_uv).r, noise_contrast);
	float mask = gradient * noise_value;
	float edge_fade = 1.0 - COLOR.g * edge_variation;

	ALBEDO = main_color.rgb * vec3(mask);
	ALPHA = edge_fade * mask;
	ALPHA_SCISSOR_THRESHOLD = 1.0 - mask;
}"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_q3yji"]
noise_type = 3
fractal_type = 0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_n76hd"]
noise = SubResource("FastNoiseLite_q3yji")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_424jk"]
render_priority = 0
shader = SubResource("Shader_1oh5o")
shader_parameter/main_color = Color(0.7, 0.02, 0.01, 1)
shader_parameter/noise_texture = SubResource("NoiseTexture2D_n76hd")
shader_parameter/splatter_scale = 2.0
shader_parameter/distortion_amount = 0.1
shader_parameter/edge_variation = 1.0
shader_parameter/noise_contrast = 1.0

[sub_resource type="Curve" id="Curve_4urvo"]
_data = [Vector2(0.00265958, 0.697518), 0.0, 0.0, 0, 0, Vector2(0.151596, 1), 0.0, 0.0, 0, 0, Vector2(1, 1), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_vabdn"]
curve = SubResource("Curve_4urvo")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_a2m3c"]
gravity = Vector3(0, 0, 0)
scale_max = 3.0
scale_curve = SubResource("CurveTexture_vabdn")

[sub_resource type="QuadMesh" id="QuadMesh_vv82n"]
orientation = 1

[node name="BloodSplash" type="Node3D"]
script = ExtResource("1_q3yji")

[node name="Splash" type="GPUParticles3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.779464, 0)
material_override = SubResource("ShaderMaterial_q3yji")
amount = 100
sub_emitter = NodePath("../Splatter")
lifetime = 5.0
explosiveness = 1.0
randomness = 1.0
process_material = SubResource("ParticleProcessMaterial_eaa30")
draw_pass_1 = SubResource("QuadMesh_ftujp")

[node name="Splatter" type="GPUParticles3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.779464, 0)
material_override = SubResource("ShaderMaterial_424jk")
cast_shadow = 0
emitting = false
amount = 300
lifetime = 30.0
randomness = 1.0
process_material = SubResource("ParticleProcessMaterial_a2m3c")
draw_pass_1 = SubResource("QuadMesh_vv82n")

[node name="GPUParticlesCollisionBox3D" type="GPUParticlesCollisionBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1.17474, 0)
size = Vector3(50, 1, 50)

[connection signal="finished" from="Splatter" to="." method="_on_splatter_finished"]
